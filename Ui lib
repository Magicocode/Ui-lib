
Vou criar uma biblioteca de UI para Roblox que seja completa e funcione tanto em PC quanto em mobile. Vamos desenvolver componentes como janelas minimizáveis, botões, toggles, dropdowns, ColorPicker, sliders, sistema de keybind e mais.

--[[
    Nebula UI Library
    Inspirado por Wizard UI Library
    Uma biblioteca completa para Roblox com suporte para PC e Mobile
]]

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")

local Nebula = {}
Nebula.Themes = {
    Default = {
        MainBackground = Color3.fromRGB(25, 25, 35),
        SecondaryBackground = Color3.fromRGB(35, 35, 45),
        TopbarColor = Color3.fromRGB(35, 35, 50),
        TextColor = Color3.fromRGB(255, 255, 255),
        AccentColor = Color3.fromRGB(114, 137, 218),
        DangerColor = Color3.fromRGB(240, 71, 71),
        OutlineColor = Color3.fromRGB(50, 50, 65),
        InputBackgroundColor = Color3.fromRGB(45, 45, 60),
        SliderBackground = Color3.fromRGB(45, 45, 60),
        SliderFill = Color3.fromRGB(114, 137, 218),
        DropdownBackground = Color3.fromRGB(45, 45, 60),
        ButtonColor = Color3.fromRGB(45, 45, 60),
        ButtonHoverColor = Color3.fromRGB(65, 65, 85),
        ToggledOnColor = Color3.fromRGB(114, 137, 218),
        ToggledOffColor = Color3.fromRGB(45, 45, 60),
        BoxColor = Color3.fromRGB(45, 45, 60),
        NotificationBackground = Color3.fromRGB(30, 30, 45),
    },
    Dark = {
        MainBackground = Color3.fromRGB(15, 15, 20),
        SecondaryBackground = Color3.fromRGB(20, 20, 30),
        TopbarColor = Color3.fromRGB(20, 20, 30),
        TextColor = Color3.fromRGB(240, 240, 240),
        AccentColor = Color3.fromRGB(80, 100, 180),
        DangerColor = Color3.fromRGB(220, 50, 50),
        OutlineColor = Color3.fromRGB(35, 35, 50),
        InputBackgroundColor = Color3.fromRGB(30, 30, 40),
        SliderBackground = Color3.fromRGB(30, 30, 40),
        SliderFill = Color3.fromRGB(80, 100, 180),
        DropdownBackground = Color3.fromRGB(30, 30, 40),
        ButtonColor = Color3.fromRGB(30, 30, 40),
        ButtonHoverColor = Color3.fromRGB(50, 50, 70),
        ToggledOnColor = Color3.fromRGB(80, 100, 180),
        ToggledOffColor = Color3.fromRGB(30, 30, 40),
        BoxColor = Color3.fromRGB(30, 30, 40),
        NotificationBackground = Color3.fromRGB(20, 20, 30),
    },
    Light = {
        MainBackground = Color3.fromRGB(230, 230, 235),
        SecondaryBackground = Color3.fromRGB(220, 220, 225),
        TopbarColor = Color3.fromRGB(210, 210, 215),
        TextColor = Color3.fromRGB(40, 40, 40),
        AccentColor = Color3.fromRGB(70, 100, 180),
        DangerColor = Color3.fromRGB(220, 50, 50),
        OutlineColor = Color3.fromRGB(200, 200, 210),
        InputBackgroundColor = Color3.fromRGB(210, 210, 220),
        SliderBackground = Color3.fromRGB(210, 210, 220),
        SliderFill = Color3.fromRGB(70, 100, 180),
        DropdownBackground = Color3.fromRGB(210, 210, 220),
        ButtonColor = Color3.fromRGB(210, 210, 220),
        ButtonHoverColor = Color3.fromRGB(200, 200, 210),
        ToggledOnColor = Color3.fromRGB(70, 100, 180),
        ToggledOffColor = Color3.fromRGB(210, 210, 220),
        BoxColor = Color3.fromRGB(210, 210, 220),
        NotificationBackground = Color3.fromRGB(220, 220, 225),
    }
}

-- Configurações
Nebula.Settings = {
    Theme = Nebula.Themes.Default,
    ToggleKey = Enum.KeyCode.RightControl,
    DeviceSensitivity = {
        Mobile = 0.5,
        Desktop = 1
    },
    AllowMultipleWindows = true,
}

-- Utilidades
local Utils = {}

function Utils.Create(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties or {}) do
        if k ~= "Children" then
            instance[k] = v
        else
            for _, child in ipairs(v) do
                child.Parent = instance
            end
        end
    end
    return instance
end

function Utils.Tween(instance, properties, duration, easingStyle, easingDirection)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

function Utils.Ripple(parent, origin)
    local ripple = Utils.Create("Frame", {
        Name = "Ripple",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.7,
        Position = origin and UDim2.fromOffset(origin.X, origin.Y) or UDim2.fromScale(0.5, 0.5),
        Size = UDim2.fromOffset(0, 0),
        ZIndex = 100
    })
    
    local corner = Utils.Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    ripple.Parent = parent
    
    local targetSize = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
    Utils.Tween(ripple, {Size = UDim2.fromOffset(targetSize, targetSize), BackgroundTransparency = 1}, 0.5)
    
    task.delay(0.5, function()
        ripple:Destroy()
    end)
end

function Utils.IsMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled and not UserInputService.MouseEnabled
end

function Utils.IsKeyboardOrGamepad()
    return UserInputService.KeyboardEnabled or UserInputService.GamepadEnabled
end

function Utils.GetTextSize(text, fontSize, font, frameSize)
    return TextService:GetTextSize(text, fontSize, font, frameSize)
end

function Utils.Draggable(topbar, main)
    local isDragging = false
    local dragInput
    local dragStart
    local startPos

    topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isDragging = true
            dragStart = input.Position
            startPos = main.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    isDragging = false
                end
            end)
        end
    end)

    topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and isDragging then
            local delta = input.Position - dragStart
            local sensitivity = Utils.IsMobile() and Nebula.Settings.DeviceSensitivity.Mobile or Nebula.Settings.DeviceSensitivity.Desktop
            main.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X * sensitivity,
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y * sensitivity
            )
        end
    end)
end

-- Criando a interface principal
function Nebula:CreateWindow(title, theme)
    local NebulaLibrary = {}
    local activeTheme = theme or Nebula.Settings.Theme
    
    -- Verificar se o ScreeGui já existe e removê-lo se necessário
    local existingGui = CoreGui:FindFirstChild("NebulaLibraryGui")
    if existingGui and not Nebula.Settings.AllowMultipleWindows then
        existingGui:Destroy()
    end
    
    -- GUI Principal
    local NebulaGui = Utils.Create("ScreenGui", {
        Name = "NebulaLibraryGui",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false,
        DisplayOrder = 999
    })
    
    -- Main Window
    local MainFrame = Utils.Create("Frame", {
        Name = "MainFrame",
        BackgroundColor3 = activeTheme.MainBackground,
        BorderSizePixel = 0,
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        Size = UDim2.fromOffset(600, 400),
        ClipsDescendants = true,
        ZIndex = 2,
        Children = {
            Utils.Create("UICorner", {
                CornerRadius = UDim.new(0, 6)
            }),
            Utils.Create("UIStroke", {
                Color = activeTheme.OutlineColor,
                Thickness = 1
            })
        }
    })
    
    -- Topbar
    local Topbar = Utils.Create("Frame", {
        Name = "Topbar",
        BackgroundColor3 = activeTheme.TopbarColor,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 30),
        ZIndex = 3,
        Children = {
            Utils.Create("UICorner", {
                CornerRadius = UDim.new(0, 6)
            }),
            Utils.Create("Frame", {
                Name = "CornerFix",
                BackgroundColor3 = activeTheme.TopbarColor,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 1, -6),
                Size = UDim2.new(1, 0, 0, 6)
            })
        }
    })
    
    -- Title
    local TitleLabel = Utils.Create("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 10, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = title or "Nebula UI Library",
        TextColor3 = activeTheme.TextColor,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 3
    })
    
    -- Botões de Controle
    local ControlButtons = Utils.Create("Frame", {
        Name = "ControlButtons",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -75, 0, 0),
        Size = UDim2.new(0, 75, 1, 0),
        ZIndex = 3
    })
    
    local MinimizeButton = Utils.Create("TextButton", {
        Name = "MinimizeButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 25, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = "-",
        TextColor3 = activeTheme.TextColor,
        TextSize = 20,
        ZIndex = 3
    })
    
    local CloseButton = Utils.Create("TextButton", {
        Name = "CloseButton",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -25, 0, 0),
        Size = UDim2.new(0, 25, 1, 0),
        Font = Enum.Font.SourceSansBold,
        Text = "×",
        TextColor3 = activeTheme.DangerColor,
        TextSize = 20,
        ZIndex = 3
    })
    
    -- Container das abas
    local TabContainer = Utils.Create("Frame", {
        Name = "TabContainer",
        BackgroundColor3 = activeTheme.SecondaryBackground,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 30),
        Size = UDim2.new(0, 120, 1, -30),
        ZIndex = 2,
        Children = {
            Utils.Create("UICorner", {
                CornerRadius = UDim.new(0, 6)
            }),
            Utils.Create("Frame", {
                Name = "CornerFix",
                BackgroundColor3 = activeTheme.SecondaryBackground,
                BorderSizePixel = 0,
                Position = UDim2.new(1, -6, 0, 0),
                Size = UDim2.new(0, 6, 1, 0)
            }),
            Utils.Create("ScrollingFrame", {
                Name = "TabScroll",
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Position = UDim2.new(0, 0, 0, 10),
                Size = UDim2.new(1, 0, 1, -10),
                ScrollBarThickness = 0,
                ScrollingDirection = Enum.ScrollingDirection.Y,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                ZIndex = 2,
                Children = {
                    Utils.Create("UIListLayout", {
                        Padding = UDim.new(0, 5),
                        SortOrder = Enum.SortOrder.LayoutOrder
                    }),
                    Utils.Create("UIPadding", {
                        PaddingLeft = UDim.new(0, 5),
                        PaddingRight = UDim.new(0, 5)
                    })
                }
            })
        }
    })
    
    -- Container do conteúdo das abas
    local TabContentContainer = Utils.Create("Frame", {
        Name = "TabContentContainer",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 120, 0, 30),
        Size = UDim2.new(1, -120, 1, -30),
        ZIndex = 2
    })
    
    -- Parenting
    Topbar.Parent = MainFrame
    TitleLabel.Parent = Topbar
    ControlButtons.Parent = Topbar
    MinimizeButton.Parent = ControlButtons
    CloseButton.Parent = ControlButtons
    TabContainer.Parent = MainFrame
    TabContentContainer.Parent = MainFrame
    MainFrame.Parent = NebulaGui
    
    -- Funcionalidades
    local minimized = false
    local originalSize = MainFrame.Size
    local minimizedSize = UDim2.fromOffset(600, 30)
    
    -- Arrastar a janela
    Utils.Draggable(Topbar, MainFrame)
    
    -- Minimizar/Maximizar
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        Utils.Ripple(MinimizeButton)
        
        if minimized then
            Utils.Tween(MainFrame, {Size = minimizedSize}, 0.3)
            TabContainer.Visible = false
            TabContentContainer.Visible = false
        else
            Utils.Tween(MainFrame, {Size = originalSize}, 0.3)
            TabContainer.Visible = true
            TabContentContainer.Visible = true
        end
    end)
    
    -- Fechar
    CloseButton.MouseButton1Click:Connect(function()
        Utils.Ripple(CloseButton)
        Utils.Tween(MainFrame, {Position = UDim2.new(1.5, 0, MainFrame.Position.Y.Scale, MainFrame.Position.Y.Offset)}, 0.5)
        task.wait(0.5)
        NebulaGui:Destroy()
    end)
    
    -- Toggle da GUI com tecla
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == Nebula.Settings.ToggleKey then
            NebulaGui.Enabled = not NebulaGui.Enabled
        end
    end)
    
    -- Abas
    local Tabs = {}
    local SelectedTab = nil
    
    function NebulaLibrary:CreateTab(tabName, icon)
        local TabButton = Utils.Create("TextButton", {
            Name = "Tab_" .. tabName,
            BackgroundColor3 = activeTheme.ButtonColor,
            Size = UDim2.new(1, 0, 0, 28),
            Text = "",
            AutoButtonColor = false,
            ZIndex = 2,
            Children = {
                Utils.Create("UICorner", {
                    CornerRadius = UDim.new(0, 4)
                }),
                Utils.Create("TextLabel", {
                    Name = "Title",
                    BackgroundTransparency = 1,
                    Size = icon and UDim2.new(1, -20, 1, 0) or UDim2.new(1, 0, 1, 0),
                    Position = icon and UDim2.new(0, 20, 0, 0) or UDim2.new(0, 0, 0, 0),
                    Font = Enum.Font.SourceSansSemibold,
                    Text = tabName,
                    TextColor3 = activeTheme.TextColor,
                    TextSize = 14,
                    ZIndex = 2
                })
            }
        })
        
        -- Adicionar ícone se especificado
        if icon then
            local IconImage = Utils.Create("ImageLabel", {
                Name = "Icon",
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 2, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                Size = UDim2.new(0, 16, 0, 16),
                Image = icon,
                ZIndex = 2
            })
            IconImage.Parent = TabButton
        end
        
        -- Conteúdo da aba
        local TabContent = Utils.Create("ScrollingFrame", {
            Name = "Content_" .. tabName,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Position = UDim2.new(0, 0, 0, 0),
            Size = UDim2.new(1, 0, 1, 0),
            ScrollBarThickness = 2,
            ScrollingDirection = Enum.ScrollingDirection.Y,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false,
            ZIndex = 2,
            Children = {
                Utils.Create("UIListLayout", {
                    Padding = UDim.new(0, 8),
                    SortOrder = Enum.SortOrder.LayoutOrder
                }),
                Utils.Create("UIPadding", {
                    PaddingLeft = UDim.new(0, 10),
                    PaddingRight = UDim.new(0, 10),
                    PaddingTop = UDim.new(0, 10),
                    PaddingBottom = UDim.new(0, 10)
                })
            }
        })
        
        -- Parenting
        TabButton.Parent = TabContainer.TabScroll
        TabContent.Parent = TabContentContainer
        
        -- Atualiza o tamanho da lista de abas
        local tabScroll = TabContainer.TabScroll
        local listLayout = tabScroll.UIListLayout
        
        tabScroll.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 10)
        
        -- Seleciona a primeira aba por padrão
        if #Tabs == 0 then
            SelectedTab = tabName
            TabButton.BackgroundColor3 = activeTheme.AccentColor
            TabContent.Visible = true
        end
        
        -- Funcionalidade de seleção de aba
        TabButton.MouseButton1Click:Connect(function()
            if SelectedTab == tabName then return end
            
            Utils.Ripple(TabButton)
            
            -- Desativa aba anterior
            if SelectedTab then
                local prevTab = TabContainer.TabScroll:FindFirstChild("Tab_" .. SelectedTab)
                local prevContent = TabContentContainer:FindFirstChild("Content_" .. SelectedTab)
                
                if prevTab then
                    Utils.Tween(prevTab, {BackgroundColor3 = activeTheme.ButtonColor}, 0.2)
                end
                
                if prevContent then
                    prevContent.Visible = false
                end
            end
            
            -- Ativa nova aba
            SelectedTab = tabName
            Utils.Tween(TabButton, {BackgroundColor3 = activeTheme.AccentColor}, 0.2)
            TabContent.Visible = true
        end)
        
        -- Hover effects
        TabButton.MouseEnter:Connect(function()
            if SelectedTab ~= tabName then
                Utils.Tween(TabButton, {BackgroundColor3 = activeTheme.ButtonHoverColor}, 0.2)
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if SelectedTab ~= tabName then
                Utils.Tween(TabButton, {BackgroundColor3 = activeTheme.ButtonColor}, 0.2)
            end
        end)
        
        -- Adiciona a aba à lista
        table.insert(Tabs, tabName)
        
        -- Funções para adicionar elementos à aba
        local TabElements = {}
        
        -- Função para atualizar o tamanho do scroll
        local function UpdateCanvasSize()
            local listLayout = TabContent.UIListLayout
            TabContent.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 20)
        end
        
        -- Adicionar seção
        function TabElements:AddSection(sectionName)
            local Section = Utils.Create("Frame", {
                Name = "Section_" .. sectionName,
                BackgroundColor3 = activeTheme.SecondaryBackground,
                Size = UDim2.new(1, 0, 0, 36), -- Tamanho inicial, será ajustado
                AutomaticSize = Enum.AutomaticSize.Y,
                ZIndex = 2,
                Children = {
                    Utils.Create("UICorner", {
                        CornerRadius = UDim.new(0, 6)
                    }),
                    Utils.Create("UIStroke", {
                        Color = activeTheme.OutlineColor,
                        Thickness = 1
                    }),
                    Utils.Create("TextLabel", {
                        Name = "Title",
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 10, 0, 8),
                        Size = UDim2.new(1, -20, 0, 20),
                        Font = Enum.Font.SourceSansBold,
                        Text = sectionName,
                        TextColor3 = activeTheme.TextColor,
                        TextSize = 16,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        ZIndex = 2
                    }),
                    Utils.Create("Frame", {
                        Name = "Content",
                        BackgroundTransparency = 1,
                        Position = UDim2.new(0, 0, 0, 36),
                        Size = UDim2.new(1, 0, 0, 0),
                        AutomaticSize = Enum.AutomaticSize.Y,
                        ZIndex = 2,
                        Children = {
                            Utils.Create("UIListLayout", {
                                Padding = UDim.new(0, 6),
                                SortOrder = Enum.SortOrder.LayoutOrder
                            }),
                            Utils.Create("UIPadding", {
                                PaddingLeft = UDim.new(0, 10),
                                PaddingRight = UDim.new(0, 10),
                                PaddingBottom = UDim.new(0, 10)
                            })
                        }
                    })
                }
            })
            
            Section.Parent = TabContent
            UpdateCanvasSize()
            
            local SectionElements = {}
            
            -- Função para atualizar o tamanho da seção
            local function UpdateSectionSize()
                local content = Section.Content
                local listLayout = content.UIListLayout
                content.Size = UDim2.new(1, 0, 0, listLayout.AbsoluteContentSize.Y + 10)
                UpdateCanvasSize()
            end
            
            -- Adicionar botão
            function SectionElements:AddButton(text, callback)
                callback = callback or function() end
                
                local Button = Utils.Create("TextButton", {
                    Name = "Button_" .. text,
                    BackgroundColor3 = activeTheme.ButtonColor,
                    Size = UDim2.new(1, 0, 0, 32),
                    Text = "",
                    AutoButtonColor = false,
                    ZIndex = 2,
                    Children = {
                        Utils.Create("UICorner", {
                            CornerRadius = UDim.new(0, 4)
                        }),
                        Utils.Create("TextLabel", {
                            Name = "Title",
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 1, 0),
                            Font = Enum.Font.SourceSansSemibold,
                            Text = text,
                            TextColor3 = activeTheme.TextColor,
                            TextSize = 14,
                            ZIndex = 2
                        })
                    }
                })
                
                Button.Parent = Section.Content
                UpdateSectionSize()
                
                -- Eventos
                Button.MouseButton1Click:Connect(function()
                    Utils.Ripple(Button)
                    callback()
                end)
                
                -- Hover effects
                Button.MouseEnter:Connect(function()
                    Utils.Tween(Button, {BackgroundColor3 = activeTheme.ButtonHoverColor}, 0.2)
                end)
                
                Button.MouseLeave:Connect(function()
                    Utils.Tween(Button, {BackgroundColor3 = activeTheme.ButtonColor}, 0.2)
                end)
                
                local ButtonFunctions = {}
                
                function ButtonFunctions:SetText(newText)
                    Button.Title.Text = newText
                end
                
                function ButtonFunctions:SetCallback(newCallback)
                    callback = newCallback
                end
                
                return ButtonFunctions
            end
            
            -- Adicionar Toggle
            function SectionElements:AddToggle(text, default, callback)
                callback = callback or function() end
                local toggled = default or false
                
                local Toggle = Utils.Create("Frame", {
                    Name = "Toggle_" .. text,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 32),
                    ZIndex = 2,
                    Children = {
                        Utils.Create("TextLabel", {
                            Name = "Title",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 0, 0, 0),
                            Size = UDim2.new(1, -40, 1, 0),
                            Font = Enum.Font.SourceSansSemibold,
                            Text = text,
                            TextColor3 = activeTheme.TextColor,
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            ZIndex = 2
                        }),
                        Utils.Create("Frame", {
                            Name = "ToggleFrame",
                            BackgroundColor3 = toggled and activeTheme.ToggledOnColor or activeTheme.ToggledOffColor,
                            Position = UDim2.new(1, -32, 0.5, 0),
                            AnchorPoint = Vector2.new(0, 0.5),
                            Size = UDim2.new(0, 32, 0, 16),
                            ZIndex = 2,
                            Children = {
                                Utils.Create("UICorner", {
                                    CornerRadius = UDim.new(1, 0)
                                }),
                                Utils.Create("Frame", {
                                    Name = "Indicator",
                                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                    Position = toggled and UDim2.new(1, -14, 0.5, 0) or UDim2.new(0, 2, 0.5, 0),
                                    AnchorPoint = Vector2.new(0, 0.5),
                                    Size = UDim2.new(0, 12, 0, 12),
ZIndex = 2,
                                    Children = {
                                        Utils.Create("UICorner", {
                                            CornerRadius = UDim.new(1, 0)
                                        })
                                    }
                                })
                            }
                        }),
                        Utils.Create("TextButton", {
                            Name = "HitBox",
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 1, 0),
                            Text = "",
                            ZIndex = 3
                        })
                    }
                })
                
                Toggle.Parent = Section.Content
                UpdateSectionSize()
                
                local function UpdateToggle()
                    Utils.Tween(Toggle.ToggleFrame, {BackgroundColor3 = toggled and activeTheme.ToggledOnColor or activeTheme.ToggledOffColor}, 0.2)
                    Utils.Tween(Toggle.ToggleFrame.Indicator, {Position = toggled and UDim2.new(1, -14, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)}, 0.2)
                    callback(toggled)
                end
                
                -- Eventos
                Toggle.HitBox.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    UpdateToggle()
                    Utils.Ripple(Toggle)
                end)
                
                local ToggleFunctions = {}
                
                function ToggleFunctions:Set(value)
                    toggled = value
                    UpdateToggle()
                end
                
                function ToggleFunctions:Get()
                    return toggled
                end
                
                return ToggleFunctions
            end
            
            -- Adicionar Slider
            function SectionElements:AddSlider(text, min, max, default, increment, callback)
                callback = callback or function() end
                min = min or 0
                max = max or 100
                default = default or min
                increment = increment or 1
                
                -- Garantir que os valores estejam dentro dos limites
                default = math.clamp(default, min, max)
                
                local Slider = Utils.Create("Frame", {
                    Name = "Slider_" .. text,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50),
                    ZIndex = 2,
                    Children = {
                        Utils.Create("TextLabel", {
                            Name = "Title",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 0, 0, 0),
                            Size = UDim2.new(1, 0, 0, 20),
                            Font = Enum.Font.SourceSansSemibold,
                            Text = text,
                            TextColor3 = activeTheme.TextColor,
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            ZIndex = 2
                        }),
                        Utils.Create("Frame", {
                            Name = "SliderFrame",
                            BackgroundColor3 = activeTheme.SliderBackground,
                            Position = UDim2.new(0, 0, 0, 25),
                            Size = UDim2.new(1, 0, 0, 6),
                            ZIndex = 2,
                            Children = {
                                Utils.Create("UICorner", {
                                    CornerRadius = UDim.new(1, 0)
                                }),
                                Utils.Create("Frame", {
                                    Name = "Fill",
                                    BackgroundColor3 = activeTheme.SliderFill,
                                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                                    ZIndex = 2,
                                    Children = {
                                        Utils.Create("UICorner", {
                                            CornerRadius = UDim.new(1, 0)
                                        })
                                    }
                                })
                            }
                        }),
                        Utils.Create("TextButton", {
                            Name = "SliderButton",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 0, 0, 20),
                            Size = UDim2.new(1, 0, 0, 16),
                            Text = "",
                            ZIndex = 3
                        }),
                        Utils.Create("TextLabel", {
                            Name = "Value",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(1, -40, 0, 0),
                            Size = UDim2.new(0, 40, 0, 20),
                            Font = Enum.Font.SourceSansSemibold,
                            Text = tostring(default),
                            TextColor3 = activeTheme.TextColor,
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Right,
                            ZIndex = 2
                        })
                    }
                })
                
                Slider.Parent = Section.Content
                UpdateSectionSize()
                
                local value = default
                local dragging = false
                
                local function SetValue(newValue)
                    -- Arredondar para o incremento mais próximo
                    newValue = min + (math.floor((newValue - min) / increment + 0.5) * increment)
                    
                    -- Garantir que o valor esteja dentro dos limites
                    value = math.clamp(newValue, min, max)
                    
                    -- Atualizar UI
                    local percent = (value - min) / (max - min)
                    Utils.Tween(Slider.SliderFrame.Fill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
                    Slider.Value.Text = tostring(value)
                    
                    -- Chamar o callback
                    callback(value)
                end
                
                -- Eventos
                Slider.SliderButton.MouseButton1Down:Connect(function()
                    dragging = true
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        local sliderPosition = Slider.SliderFrame.AbsolutePosition.X
                        local sliderSize = Slider.SliderFrame.AbsoluteSize.X
                        local mousePosition = input.Position.X
                        
                        local percent = math.clamp((mousePosition - sliderPosition) / sliderSize, 0, 1)
                        local newValue = min + (max - min) * percent
                        
                        SetValue(newValue)
                    end
                end)
                
                local SliderFunctions = {}
                
                function SliderFunctions:Set(newValue)
                    SetValue(newValue)
                end
                
                function SliderFunctions:Get()
                    return value
                end
                
                return SliderFunctions
            end
            
            -- Adicionar Dropdown
            function SectionElements:AddDropdown(text, options, default, callback)
                callback = callback or function() end
                options = options or {}
                default = default or (options[1] or "")
                
                local opened = false
                local selected = default
                
                local Dropdown = Utils.Create("Frame", {
                    Name = "Dropdown_" .. text,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50), -- Será redimensionado 
                    ClipsDescendants = true,
                    ZIndex = 2,
                    Children = {
                        Utils.Create("TextLabel", {
                            Name = "Title",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 0, 0, 0),
                            Size = UDim2.new(1, 0, 0, 20),
                            Font = Enum.Font.SourceSansSemibold,
                            Text = text,
                            TextColor3 = activeTheme.TextColor,
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            ZIndex = 2
                        }),
                        Utils.Create("Frame", {
                            Name = "DropdownFrame",
                            BackgroundColor3 = activeTheme.DropdownBackground,
                            Position = UDim2.new(0, 0, 0, 25),
                            Size = UDim2.new(1, 0, 0, 30),
                            ZIndex = 2,
                            Children = {
                                Utils.Create("UICorner", {
                                    CornerRadius = UDim.new(0, 4)
                                }),
                                Utils.Create("TextLabel", {
                                    Name = "Selected",
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(0, 10, 0, 0),
                                    Size = UDim2.new(1, -40, 1, 0),
                                    Font = Enum.Font.SourceSans,
                                    Text = selected,
                                    TextColor3 = activeTheme.TextColor,
                                    TextSize = 14,
                                    TextXAlignment = Enum.TextXAlignment.Left,
                                    ZIndex = 2
                                }),
                                Utils.Create("TextButton", {
                                    Name = "ToggleButton",
                                    BackgroundTransparency = 1,
                                    Size = UDim2.new(1, 0, 1, 0),
                                    Text = "",
                                    ZIndex = 3
                                }),
                                Utils.Create("ImageLabel", {
                                    Name = "Arrow",
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(1, -20, 0.5, 0),
                                    AnchorPoint = Vector2.new(0.5, 0.5),
                                    Size = UDim2.new(0, 12, 0, 12),
                                    Image = "rbxassetid://6031091004", -- Arrow down icon
                                    ZIndex = 2
                                })
                            }
                        }),
                        Utils.Create("Frame", {
                            Name = "OptionList",
                            BackgroundColor3 = activeTheme.DropdownBackground,
                            Position = UDim2.new(0, 0, 0, 60),
                            Size = UDim2.new(1, 0, 0, 0), -- Será redimensionado
                            Visible = false,
                            ZIndex = 4,
                            Children = {
                                Utils.Create("UICorner", {
                                    CornerRadius = UDim.new(0, 4)
                                }),
                                Utils.Create("ScrollingFrame", {
                                    Name = "OptionScroll",
                                    BackgroundTransparency = 1,
                                    BorderSizePixel = 0,
                                    Size = UDim2.new(1, 0, 1, 0),
                                    CanvasSize = UDim2.new(0, 0, 0, 0),
                                    ScrollBarThickness = 2,
                                    ZIndex = 4,
                                    Children = {
                                        Utils.Create("UIListLayout", {
                                            Padding = UDim.new(0, 2),
                                            SortOrder = Enum.SortOrder.LayoutOrder
                                        })
                                    }
                                })
                            }
                        })
                    }
                })
                
                Dropdown.Parent = Section.Content
                UpdateSectionSize()
                
                -- Função para popular as opções
                local function PopulateOptions()
                    local optionScroll = Dropdown.OptionList.OptionScroll
                    
                    -- Limpar opções existentes
                    for _, child in ipairs(optionScroll:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    -- Adicionar novas opções
                    for i, option in ipairs(options) do
                        local OptionButton = Utils.Create("TextButton", {
                            Name = "Option_" .. i,
                            BackgroundTransparency = 1,
                            Size = UDim2.new(1, 0, 0, 25),
                            Text = "",
                            ZIndex = 5,
                            Children = {
                                Utils.Create("TextLabel", {
                                    Name = "Text",
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(0, 10, 0, 0),
                                    Size = UDim2.new(1, -10, 1, 0),
                                    Font = Enum.Font.SourceSans,
                                    Text = option,
                                    TextColor3 = activeTheme.TextColor,
                                    TextSize = 14,
                                    TextXAlignment = Enum.TextXAlignment.Left,
                                    ZIndex = 5
                                })
                            }
                        })
                        
                        -- Eventos
                        OptionButton.MouseEnter:Connect(function()
                            Utils.Tween(OptionButton, {BackgroundTransparency = 0.9}, 0.2)
                        end)
                        
                        OptionButton.MouseLeave:Connect(function()
                            Utils.Tween(OptionButton, {BackgroundTransparency = 1}, 0.2)
                        end)
                        
                        OptionButton.MouseButton1Click:Connect(function()
                            selected = option
                            Dropdown.DropdownFrame.Selected.Text = selected
                            ToggleDropdown(false)
                            callback(selected)
                        end)
                        
                        OptionButton.Parent = optionScroll
                    end
                    
                    -- Atualizar tamanho
                    local listLayout = optionScroll.UIListLayout
                    local contentSize = listLayout.AbsoluteContentSize.Y
                    
                    optionScroll.CanvasSize = UDim2.new(0, 0, 0, contentSize)
                    local maxHeight = math.min(120, contentSize) -- Altura máxima de 120 pixels
                    Dropdown.OptionList.Size = UDim2.new(1, 0, 0, maxHeight)
                end
                
                -- Função para alternar o dropdown
                function ToggleDropdown(state)
                    opened = state
                    Dropdown.OptionList.Visible = opened
                    
                    local targetSize
                    if opened then
                        targetSize = UDim2.new(1, 0, 0, 60 + Dropdown.OptionList.Size.Y.Offset)
                        PopulateOptions()
                    else
                        targetSize = UDim2.new(1, 0, 0, 55)
                    end
                    
                    Utils.Tween(Dropdown, {Size = targetSize}, 0.2)
                    Utils.Tween(Dropdown.DropdownFrame.Arrow, {Rotation = opened and 180 or 0}, 0.2)
                    
                    -- Atualizar tamanho da seção
                    UpdateSectionSize()
                end
                
                -- Eventos
                Dropdown.DropdownFrame.ToggleButton.MouseButton1Click:Connect(function()
                    ToggleDropdown(not opened)
                    Utils.Ripple(Dropdown.DropdownFrame)
                end)
                
                -- Fechar dropdown ao clicar fora
                UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        local guiObjects = Players.LocalPlayer:GetGuiObjectsAtPosition(input.Position.X, input.Position.Y)
                        local isOutside = true
                        
                        for _, obj in ipairs(guiObjects) do
                            if obj:IsDescendantOf(Dropdown) then
                                isOutside = false
                                break
                            end
                        end
                        
                        if isOutside and opened then
                            ToggleDropdown(false)
                        end
                    end
                end)
                
                local DropdownFunctions = {}
                
                function DropdownFunctions:Set(option)
                    if table.find(options, option) then
                        selected = option
                        Dropdown.DropdownFrame.Selected.Text = selected
                        callback(selected)
                    end
                end
                
                function DropdownFunctions:Get()
                    return selected
                end
                
                function DropdownFunctions:Refresh(newOptions, keepSelected)
                    options = newOptions or {}
                    
                    if not keepSelected or not table.find(options, selected) then
                        selected = options[1] or ""
                        Dropdown.DropdownFrame.Selected.Text = selected
                    end
                    
                    if opened then
                        PopulateOptions()
                    end
                    
                    callback(selected)
                end
                
                return DropdownFunctions
            end
            
            -- Adicionar Input
            function SectionElements:AddTextbox(text, placeholder, default, callback)
                callback = callback or function() end
                placeholder = placeholder or ""
                default = default or ""
                
                local Textbox = Utils.Create("Frame", {
                    Name = "Textbox_" .. text,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50),
                    ZIndex = 2,
                    Children = {
                        Utils.Create("TextLabel", {
                            Name = "Title",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 0, 0, 0),
                            Size = UDim2.new(1, 0, 0, 20),
                            Font = Enum.Font.SourceSansSemibold,
                            Text = text,
                            TextColor3 = activeTheme.TextColor,
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            ZIndex = 2
                        }),
                        Utils.Create("Frame", {
                            Name = "InputFrame",
                            BackgroundColor3 = activeTheme.InputBackgroundColor,
                            Position = UDim2.new(0, 0, 0, 25),
                            Size = UDim2.new(1, 0, 0, 30),
                            ZIndex = 2,
                            Children = {
                                Utils.Create("UICorner", {
                                    CornerRadius = UDim.new(0, 4)
                                }),
                                Utils.Create("TextBox", {
                                    Name = "Input",
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(0, 10, 0, 0),
                                    Size = UDim2.new(1, -20, 1, 0),
                                    Font = Enum.Font.SourceSans,
                                    PlaceholderText = placeholder,
                                    Text = default,
                                    TextColor3 = activeTheme.TextColor,
                                    PlaceholderColor3 = Color3.fromRGB(127, 127, 127),
                                    TextSize = 14,
                                    TextXAlignment = Enum.TextXAlignment.Left,
                                    ClearTextOnFocus = false,
                                    ZIndex = 2
                                })
                            }
                        })
                    }
                })
                
                Textbox.Parent = Section.Content
                UpdateSectionSize()
                
                -- Eventos
                local input = Textbox.InputFrame.Input
                
                input.Focused:Connect(function()
                    Utils.Tween(Textbox.InputFrame, {BorderColor3 = activeTheme.AccentColor}, 0.2)
                end)
                
                input.FocusLost:Connect(function(enterPressed)
                    Utils.Tween(Textbox.InputFrame, {BorderColor3 = activeTheme.OutlineColor}, 0.2)
                    callback(input.Text, enterPressed)
                end)
                
                local TextboxFunctions = {}
                
                function TextboxFunctions:Set(value)
                    input.Text = value
                    callback(value, false)
                end
                
                function TextboxFunctions:Get()
                    return input.Text
                end
                
                function TextboxFunctions:SetPlaceholder(text)
                    input.PlaceholderText = text
                end
                
                return TextboxFunctions
            end
            
            -- Adicionar ColorPicker
            function SectionElements:AddColorPicker(text, default, callback)
                callback = callback or function() end
                default = default or Color3.fromRGB(255, 255, 255)
                
                local opened = false
                local hue, sat, val = Color3.toHSV(default)
                local color = default
                
                local ColorPicker = Utils.Create("Frame", {
                    Name = "ColorPicker_" .. text,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50),
                    ClipsDescendants = true,
                    ZIndex = 2,
                    Children = {
                        Utils.Create("TextLabel", {
                            Name = "Title",
                            BackgroundTransparency = 1,
                            Position = UDim2.new(0, 0, 0, 0),
                            Size = UDim2.new(1, -40, 0, 20),
                            Font = Enum.Font.SourceSansSemibold,
                            Text = text,
                            TextColor3 = activeTheme.TextColor,
                            TextSize = 14,
                            TextXAlignment = Enum.TextXAlignment.Left,
                            ZIndex = 2
                        }),
                        Utils.Create("Frame", {
                            Name = "Display",
                            BackgroundColor3 = color,
                            Position = UDim2.new(1, -30, 0, 0),
                            Size = UDim2.new(0, 30, 0, 20),
                            ZIndex = 2,
                            Children = {
                                Utils.Create("UICorner", {
                                    CornerRadius = UDim.new(0, 4)
                                }),
                                Utils.Create("TextButton", {
                                    Name = "Button",
                                    BackgroundTransparency = 1,
                                    Size = UDim2.new(1, 0, 1, 0),
                                    Text = "",
                                    ZIndex = 3
                                })
                            }
                        }),
                        Utils.Create("Frame", {
                            Name = "ColorPickerFrame",
                            BackgroundColor3 = activeTheme.SecondaryBackground,
                            Position = UDim2.new(0, 0, 0, 25),
                            Size = UDim2.new(1, 0, 0, 160),
                            Visible = false,
                            ZIndex = 5,
                            Children = {
                                Utils.Create("UICorner", {
                                    CornerRadius = UDim.new(0, 4)
                                }),
                                Utils.Create("UIStroke", {
                                    Color = activeTheme.OutlineColor,
                                    Thickness = 1
                                }),
                                -- Color Gradient
                                Utils.Create("ImageLabel", {
                                    Name = "ColorGradient",
                                    BackgroundColor3 = Color3.fromHSV(hue, 1, 1),
                                    Position = UDim2.new(0, 10, 0, 10),
                                    Size = UDim2.new(1, -20, 0, 100),
                                    ZIndex = 5,
                                    Children = {
                                        Utils.Create("UICorner", {
                                            CornerRadius = UDim.new(0, 4)
                                        }),
                                        Utils.Create("UIGradient", {
                                            Color = ColorSequence.new({
                                                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
                                                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                                            }),
                                            Transparency = NumberSequence.new({
                                                NumberSequenceKeypoint.new(0, 0),
                                                NumberSequenceKeypoint.new(1, 1)
                                            }),
                                            Rotation = 90
                                        }),
                                        Utils.Create("Frame", {
                                            Name = "Selector",
                                            AnchorPoint = Vector2.new(0.5, 0.5),
                                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                            Position = UDim2.new(sat, 0, 1 - val, 0),
                                            Size = UDim2.new(0, 10, 0, 10),
                                            ZIndex = 6,
                                            Children = {
                                                Utils.Create("UICorner", {
                                                    CornerRadius = UDim.new(1, 0)
                                                }),
                                                Utils.Create("UIStroke", {
                                                    Color = Color3.fromRGB(0, 0, 0),
                                                    Thickness = 1
                                                })
                                            }
                                        }),
                                        Utils.Create("TextButton", {
                                            Name = "GradientButton",
                                            BackgroundTransparency = 1,
                                            Size = UDim2.new(1, 0, 1, 0),
                                            Text = "",
                                            ZIndex = 7
                                        })
                                    }
                                }),
                                -- Hue Slider
                                Utils.Create("Frame", {
                                    Name = "HueSlider",
                                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                    Position = UDim2.new(0, 10, 0, 120),
                                    Size = UDim2.new(1, -20, 0, 15),
                                    ZIndex = 5,
                                    Children = {
                                        Utils.Create("UICorner", {
                                            CornerRadius = UDim.new(0, 4)
                                        }),
                                        Utils.Create("UIGradient", {
                                            Color = ColorSequence.new({
                                                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)), -- Red
                                                ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)), -- Yellow
                                                ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)), -- Green
                                                ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)), -- Cyan
                                                ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)), -- Blue
                                                ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)), -- Magenta
                                                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0)) -- Red
                                            })
                                        }),
                                        Utils.Create("Frame", {
                                            Name = "Selector",
                                            AnchorPoint = Vector2.new(0.5, 0.5),
                                            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                                            Position = UDim2.new(hue, 0, 0.5, 0),
                                            Size = UDim2.new(0, 5, 1, 2),
                                            ZIndex = 6,
                                            Children = {
                                                Utils.Create("UICorner", {
                                                    CornerRadius = UDim.new(0, 2)
                                                }),
                                                Utils.Create("UIStroke", {
                                                    Color = Color3.fromRGB(0, 0, 0),
                                                    Thickness = 1
                                                })
                                            }
                                        }),
                                        Utils.Create("TextButton", {
                                            Name = "HueButton",
                                            BackgroundTransparency = 1,
                                            Size = UDim2.new(1, 0, 1, 0),
                                            Text = "",
                                            ZIndex = 7
                                        })
                                    }
                                }),
                                -- RGB Display
                                Utils.Create("Frame", {
                                    Name = "RGBDisplay",
                                    BackgroundTransparency = 1,
                                    Position = UDim2.new(0, 10, 0, 145),
                                    Size = UDim2.new(1, -20, 0, 20),
                                    ZIndex = 5,
                                    Children = {
                                        Utils.Create("TextLabel", {
                                            Name = "RGB",
                                            BackgroundTransparency = 1,
                                            Size = UDim2.new(1, 0, 1, 0),
                                            Font = Enum.Font.SourceSans,
                                            Text = string.format("RGB: %d, %d, %d", math.floor(color.R * 255), math.floor(color.G * 255), math.floor(color.B * 255)),
                                            TextColor3 = activeTheme.TextColor,
                                            TextSize = 14,
                                            ZIndex = 5
                                        })
                                    }
                                })
                            }
                        })
                    }
                })
                
                ColorPicker.Parent = Section.Content
                UpdateSectionSize()
                
                -- Funções para atualizar a cor
                local function UpdateColor()
                    local newColor = Color3.fromHSV(hue, sat, val)
                    color = newColor
                    
                    -- Atualizar exibição
                    Color